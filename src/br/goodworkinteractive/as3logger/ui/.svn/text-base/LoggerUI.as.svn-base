/**
 * Just sent us an e-mail, if you like this solution and/or want to contribute.
 * <hello@wemakegoodworks.com> =)
 *
 * Copyright (c) 2011 GoodWork! Interactive.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package br.goodworkinteractive.as3logger.ui
{
	
	import br.goodworkinteractive.as3logger.utils.LoggerUtils;
	
	import flash.display.Graphics;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.text.TextField;
	import flash.text.TextFormat;

	/**
	 * Logger clip.
	 * 
	 * @langversion ActionScript 3
	 * @playerversion Flash 10.0.0
	 * 
	 * @author Victor Potasso
	 * @author Bruno Dias
	 * @since  23.03.2011
	 */
	public class LoggerUI extends Sprite
	{
		
		//*
		//* Static & Constants
		//*
		
		/** @private Padding of text fields. **/
		static private const PADDING:Number = 10;
		static private const RETURN:String = "\n";
		
		static private var LINES_STYLE:TextFormat = new TextFormat("Tahoma", 12, 0x444444,null,null,null,null,null, "right");
		static private var TIMESTAMP_STYLE:TextFormat = new TextFormat("Tahoma", 12, 0xFFFFFF,null,null,null,null,null, "center");
		static private var FIELD_STYLE:TextFormat = new TextFormat("Tahoma", 12, 0xFFFFFF,null,null,null,null,null, "left");
		
		static private var _line:Number = 1;
		
		/**
		 * @constructor
		 */
		public function LoggerUI() :void
		{
			_lineNumber = new TextField();
			_timestamp = new TextField();
			_log = new TextField();
			
			_lineNumber.multiline = 
			_timestamp.multiline = 
			_log.multiline = true;
			
			_lineNumber.width = 30 - PADDING;
			_timestamp.width = 66;
			
			_lineNumber.defaultTextFormat = LINES_STYLE;
			_timestamp.defaultTextFormat = TIMESTAMP_STYLE;
			_log.defaultTextFormat = FIELD_STYLE;
			
			addEventListener(Event.ADDED_TO_STAGE, eventsHandler, false, 0, true);
		}
		
		//*
		//* Properties
		//*
		
		/** @private Fields. **/
		private var _lineNumber:TextField;
		private var _timestamp:TextField;
		private var _log:TextField;
		
		/** @private Colors. **/
		private var _fieldTextColor:Number;
		private var _fieldTextColorHighlight:Number;
		
		//*
		//* Methods
		//*
		
		/** @private Initialize. **/
		private function initialize() :void
		{
			if (stage)
			{
				stage.addEventListener(Event.RESIZE, eventsHandler, false, 0, true);
				drawBackground();
				align();
			}
			
			addChild(_lineNumber);
			addChild(_timestamp);
			addChild(_log);
			
			organizeLayout();
		}
		
		/**
		 * @private
		 * Align the ui.
		 */
		private function align() :void
		{
			x = y = 0;
		}
		
		/**
		 * @private
		 * Draws the background of the ui.
		 */
		private function drawBackground() :void
		{
			var gr:Graphics = graphics;
			if(stage)
			{
				gr.clear();
				gr.beginFill(0x1A1A1A, .95);
				gr.drawRect(0,0,stage.stageWidth/2,stage.stageHeight);
				gr.beginFill(0xD1D1D1, .95);
				gr.drawRect(0,0,40,stage.stageHeight);
				gr.endFill();
			}
		}
		
		/**
		 * @private
		 * Organize layout.
		 */
		private function organizeLayout() :void
		{
			_lineNumber.x = _lineNumber.y = _timestamp.y = _log.y = PADDING;
			_timestamp.x = _lineNumber.x + _lineNumber.width + (PADDING * 2);
			_log.x = _timestamp.x + _timestamp.width + PADDING;
			
			_lineNumber.height = _timestamp.height = _log.height = stage.height - (PADDING * 2);
			
			_log.width = (stage.stageWidth/2) - (_timestamp.x + _timestamp.width + (PADDING * 2));
		}
		
		/**
		 * @public
		 * Write a log on the TextField.
		 * @param text String
		 */
		public function write(text:String) :void
		{
			_lineNumber.appendText((_line++).toString() + RETURN);
			_timestamp.appendText(LoggerUtils.timestamp() + RETURN);
			_log.htmlText += text + "<br>";
		}
		
		//*
		//* Getters & Setters
		//*
		
		public function set setColor (c:Number) :void { _log.textColor = c; }
		
		public function set textColor(value:Number) :void { _fieldTextColor = value; }
		
		public function get textColor ():Number { return _fieldTextColor; }
		
		public function set highlightTextColor(value:Number) :void { _fieldTextColorHighlight = value; }
		
		public function get highlightTextColor() :Number { return _fieldTextColorHighlight; }
		
		//*
		//* Events
		//*
		
		/**
		 * @private
		 * Handle all events dispatched as Event.
		 * @param event Event
		 */
		private function eventsHandler(event:Event) :void
		{
			switch (event.type)
			{
				case Event.ADDED_TO_STAGE :
					initialize();
				break;
				
				case Event.RESIZE :
					drawBackground();
					align();
				break;
			}
		}
		
	}
}